/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcApplication.h"
#include "ifcpp/IFC4X3/include/IfcIdentifier.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcOrganization.h"

// ENTITY IfcApplication 
IFC4X3::IfcApplication::IfcApplication( int tag ) { m_tag = tag; }
void IFC4X3::IfcApplication::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCAPPLICATION" << "(";
	if( m_ApplicationDeveloper ) { stream << "#" << m_ApplicationDeveloper->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Version ) { m_Version->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ApplicationFullName ) { m_ApplicationFullName->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ApplicationIdentifier ) { m_ApplicationIdentifier->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcApplication::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcApplication::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 4 ){ std::stringstream err; err << "Wrong parameter count for entity IfcApplication, expecting 4, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	readEntityReference( args[0], m_ApplicationDeveloper, map, errorStream );
	m_Version = IfcLabel::createObjectFromSTEP( args[1], map, errorStream );
	m_ApplicationFullName = IfcLabel::createObjectFromSTEP( args[2], map, errorStream );
	m_ApplicationIdentifier = IfcIdentifier::createObjectFromSTEP( args[3], map, errorStream );
}
void IFC4X3::IfcApplication::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	vec_attributes.emplace_back( std::make_pair( "ApplicationDeveloper", m_ApplicationDeveloper ) );
	vec_attributes.emplace_back( std::make_pair( "Version", m_Version ) );
	vec_attributes.emplace_back( std::make_pair( "ApplicationFullName", m_ApplicationFullName ) );
	vec_attributes.emplace_back( std::make_pair( "ApplicationIdentifier", m_ApplicationIdentifier ) );
}
void IFC4X3::IfcApplication::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
}
void IFC4X3::IfcApplication::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcApplication::unlinkFromInverseCounterparts()
{
}
