/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcCurve.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcLogical.h"
#include "ifcpp/IFC4X3/include/IfcOffsetCurve2D.h"
#include "ifcpp/IFC4X3/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4X3/include/IfcStyledItem.h"

// ENTITY IfcOffsetCurve2D 
IFC4X3::IfcOffsetCurve2D::IfcOffsetCurve2D( int tag ) { m_tag = tag; }
void IFC4X3::IfcOffsetCurve2D::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCOFFSETCURVE2D" << "(";
	if( m_BasisCurve ) { stream << "#" << m_BasisCurve->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Distance ) { m_Distance->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_SelfIntersect ) { m_SelfIntersect->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcOffsetCurve2D::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcOffsetCurve2D::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 3 ){ std::stringstream err; err << "Wrong parameter count for entity IfcOffsetCurve2D, expecting 3, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	readEntityReference( args[0], m_BasisCurve, map, errorStream );
	m_Distance = IfcLengthMeasure::createObjectFromSTEP( args[1], map, errorStream );
	m_SelfIntersect = IfcLogical::createObjectFromSTEP( args[2], map, errorStream );
}
void IFC4X3::IfcOffsetCurve2D::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcOffsetCurve::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Distance", m_Distance ) );
	vec_attributes.emplace_back( std::make_pair( "SelfIntersect", m_SelfIntersect ) );
}
void IFC4X3::IfcOffsetCurve2D::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcOffsetCurve::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcOffsetCurve2D::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcOffsetCurve::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcOffsetCurve2D::unlinkFromInverseCounterparts()
{
	IfcOffsetCurve::unlinkFromInverseCounterparts();
}
