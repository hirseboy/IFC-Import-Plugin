/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcAlignmentCantSegment.h"
#include "ifcpp/IFC4X3/include/IfcAlignmentCantSegmentTypeEnum.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcNonNegativeLengthMeasure.h"

// ENTITY IfcAlignmentCantSegment 
IFC4X3::IfcAlignmentCantSegment::IfcAlignmentCantSegment( int tag ) { m_tag = tag; }
void IFC4X3::IfcAlignmentCantSegment::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCALIGNMENTCANTSEGMENT" << "(";
	if( m_StartTag ) { m_StartTag->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_EndTag ) { m_EndTag->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_StartDistAlong ) { m_StartDistAlong->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_HorizontalLength ) { m_HorizontalLength->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_StartCantLeft ) { m_StartCantLeft->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_EndCantLeft ) { m_EndCantLeft->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_StartCantRight ) { m_StartCantRight->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_EndCantRight ) { m_EndCantRight->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_PredefinedType ) { m_PredefinedType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcAlignmentCantSegment::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcAlignmentCantSegment::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 9 ){ std::stringstream err; err << "Wrong parameter count for entity IfcAlignmentCantSegment, expecting 9, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_StartTag = IfcLabel::createObjectFromSTEP( args[0], map, errorStream );
	m_EndTag = IfcLabel::createObjectFromSTEP( args[1], map, errorStream );
	m_StartDistAlong = IfcLengthMeasure::createObjectFromSTEP( args[2], map, errorStream );
	m_HorizontalLength = IfcNonNegativeLengthMeasure::createObjectFromSTEP( args[3], map, errorStream );
	m_StartCantLeft = IfcLengthMeasure::createObjectFromSTEP( args[4], map, errorStream );
	m_EndCantLeft = IfcLengthMeasure::createObjectFromSTEP( args[5], map, errorStream );
	m_StartCantRight = IfcLengthMeasure::createObjectFromSTEP( args[6], map, errorStream );
	m_EndCantRight = IfcLengthMeasure::createObjectFromSTEP( args[7], map, errorStream );
	m_PredefinedType = IfcAlignmentCantSegmentTypeEnum::createObjectFromSTEP( args[8], map, errorStream );
}
void IFC4X3::IfcAlignmentCantSegment::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcAlignmentParameterSegment::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "StartDistAlong", m_StartDistAlong ) );
	vec_attributes.emplace_back( std::make_pair( "HorizontalLength", m_HorizontalLength ) );
	vec_attributes.emplace_back( std::make_pair( "StartCantLeft", m_StartCantLeft ) );
	vec_attributes.emplace_back( std::make_pair( "EndCantLeft", m_EndCantLeft ) );
	vec_attributes.emplace_back( std::make_pair( "StartCantRight", m_StartCantRight ) );
	vec_attributes.emplace_back( std::make_pair( "EndCantRight", m_EndCantRight ) );
	vec_attributes.emplace_back( std::make_pair( "PredefinedType", m_PredefinedType ) );
}
void IFC4X3::IfcAlignmentCantSegment::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcAlignmentParameterSegment::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcAlignmentCantSegment::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcAlignmentParameterSegment::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcAlignmentCantSegment::unlinkFromInverseCounterparts()
{
	IfcAlignmentParameterSegment::unlinkFromInverseCounterparts();
}
