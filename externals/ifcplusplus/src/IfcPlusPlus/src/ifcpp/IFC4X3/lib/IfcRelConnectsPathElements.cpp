/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcConnectionGeometry.h"
#include "ifcpp/IFC4X3/include/IfcConnectionTypeEnum.h"
#include "ifcpp/IFC4X3/include/IfcElement.h"
#include "ifcpp/IFC4X3/include/IfcGloballyUniqueId.h"
#include "ifcpp/IFC4X3/include/IfcInteger.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcOwnerHistory.h"
#include "ifcpp/IFC4X3/include/IfcRelConnectsPathElements.h"
#include "ifcpp/IFC4X3/include/IfcText.h"

// ENTITY IfcRelConnectsPathElements 
IFC4X3::IfcRelConnectsPathElements::IfcRelConnectsPathElements( int tag ) { m_tag = tag; }
void IFC4X3::IfcRelConnectsPathElements::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCRELCONNECTSPATHELEMENTS" << "(";
	if( m_GlobalId ) { m_GlobalId->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_OwnerHistory ) { stream << "#" << m_OwnerHistory->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ConnectionGeometry ) { stream << "#" << m_ConnectionGeometry->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_RelatingElement ) { stream << "#" << m_RelatingElement->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_RelatedElement ) { stream << "#" << m_RelatedElement->m_tag; } else { stream << "$"; }
	stream << ",";
	writeTypeOfIntList( stream, m_RelatingPriorities, false );
	stream << ",";
	writeTypeOfIntList( stream, m_RelatedPriorities, false );
	stream << ",";
	if( m_RelatedConnectionType ) { m_RelatedConnectionType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_RelatingConnectionType ) { m_RelatingConnectionType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcRelConnectsPathElements::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcRelConnectsPathElements::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 11 ){ std::stringstream err; err << "Wrong parameter count for entity IfcRelConnectsPathElements, expecting 11, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_GlobalId = IfcGloballyUniqueId::createObjectFromSTEP( args[0], map, errorStream );
	readEntityReference( args[1], m_OwnerHistory, map, errorStream );
	m_Name = IfcLabel::createObjectFromSTEP( args[2], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[3], map, errorStream );
	readEntityReference( args[4], m_ConnectionGeometry, map, errorStream );
	readEntityReference( args[5], m_RelatingElement, map, errorStream );
	readEntityReference( args[6], m_RelatedElement, map, errorStream );
	readTypeOfIntegerList( args[7], m_RelatingPriorities );
	readTypeOfIntegerList( args[8], m_RelatedPriorities );
	m_RelatedConnectionType = IfcConnectionTypeEnum::createObjectFromSTEP( args[9], map, errorStream );
	m_RelatingConnectionType = IfcConnectionTypeEnum::createObjectFromSTEP( args[10], map, errorStream );
}
void IFC4X3::IfcRelConnectsPathElements::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcRelConnectsElements::getAttributes( vec_attributes );
	shared_ptr<AttributeObjectVector> RelatingPriorities_vec_object( new AttributeObjectVector() );
	std::copy( m_RelatingPriorities.begin(), m_RelatingPriorities.end(), std::back_inserter( RelatingPriorities_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "RelatingPriorities", RelatingPriorities_vec_object ) );
	shared_ptr<AttributeObjectVector> RelatedPriorities_vec_object( new AttributeObjectVector() );
	std::copy( m_RelatedPriorities.begin(), m_RelatedPriorities.end(), std::back_inserter( RelatedPriorities_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "RelatedPriorities", RelatedPriorities_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "RelatedConnectionType", m_RelatedConnectionType ) );
	vec_attributes.emplace_back( std::make_pair( "RelatingConnectionType", m_RelatingConnectionType ) );
}
void IFC4X3::IfcRelConnectsPathElements::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcRelConnectsElements::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcRelConnectsPathElements::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcRelConnectsElements::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcRelConnectsPathElements::unlinkFromInverseCounterparts()
{
	IfcRelConnectsElements::unlinkFromInverseCounterparts();
}
