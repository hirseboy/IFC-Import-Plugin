/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcAddress.h"
#include "ifcpp/IFC4X3/include/IfcAddressTypeEnum.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcOrganization.h"
#include "ifcpp/IFC4X3/include/IfcPerson.h"
#include "ifcpp/IFC4X3/include/IfcText.h"

// ENTITY IfcAddress 
IFC4X3::IfcAddress::IfcAddress( int tag ) { m_tag = tag; }
void IFC4X3::IfcAddress::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCADDRESS" << "(";
	if( m_Purpose ) { m_Purpose->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_UserDefinedPurpose ) { m_UserDefinedPurpose->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcAddress::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcAddress::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 3 ){ std::stringstream err; err << "Wrong parameter count for entity IfcAddress, expecting 3, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_Purpose = IfcAddressTypeEnum::createObjectFromSTEP( args[0], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[1], map, errorStream );
	m_UserDefinedPurpose = IfcLabel::createObjectFromSTEP( args[2], map, errorStream );
}
void IFC4X3::IfcAddress::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	vec_attributes.emplace_back( std::make_pair( "Purpose", m_Purpose ) );
	vec_attributes.emplace_back( std::make_pair( "Description", m_Description ) );
	vec_attributes.emplace_back( std::make_pair( "UserDefinedPurpose", m_UserDefinedPurpose ) );
}
void IFC4X3::IfcAddress::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	shared_ptr<AttributeObjectVector> OfPerson_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_OfPerson_inverse.size(); ++i )
	{
		if( !m_OfPerson_inverse[i].expired() )
		{
			OfPerson_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcPerson>( m_OfPerson_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "OfPerson_inverse", OfPerson_inverse_vec_obj ) );
	shared_ptr<AttributeObjectVector> OfOrganization_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_OfOrganization_inverse.size(); ++i )
	{
		if( !m_OfOrganization_inverse[i].expired() )
		{
			OfOrganization_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcOrganization>( m_OfOrganization_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "OfOrganization_inverse", OfOrganization_inverse_vec_obj ) );
}
void IFC4X3::IfcAddress::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcAddress::unlinkFromInverseCounterparts()
{
}
