/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcAxis2Placement2D.h"
#include "ifcpp/IFC4X3/include/IfcExternalReferenceRelationship.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcNonNegativeLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcPositiveLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcProfileProperties.h"
#include "ifcpp/IFC4X3/include/IfcProfileTypeEnum.h"
#include "ifcpp/IFC4X3/include/IfcRectangleHollowProfileDef.h"

// ENTITY IfcRectangleHollowProfileDef 
IFC4X3::IfcRectangleHollowProfileDef::IfcRectangleHollowProfileDef( int tag ) { m_tag = tag; }
void IFC4X3::IfcRectangleHollowProfileDef::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCRECTANGLEHOLLOWPROFILEDEF" << "(";
	if( m_ProfileType ) { m_ProfileType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ProfileName ) { m_ProfileName->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Position ) { stream << "#" << m_Position->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_XDim ) { m_XDim->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_YDim ) { m_YDim->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_WallThickness ) { m_WallThickness->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_InnerFilletRadius ) { m_InnerFilletRadius->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_OuterFilletRadius ) { m_OuterFilletRadius->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcRectangleHollowProfileDef::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcRectangleHollowProfileDef::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 8 ){ std::stringstream err; err << "Wrong parameter count for entity IfcRectangleHollowProfileDef, expecting 8, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_ProfileType = IfcProfileTypeEnum::createObjectFromSTEP( args[0], map, errorStream );
	m_ProfileName = IfcLabel::createObjectFromSTEP( args[1], map, errorStream );
	readEntityReference( args[2], m_Position, map, errorStream );
	m_XDim = IfcPositiveLengthMeasure::createObjectFromSTEP( args[3], map, errorStream );
	m_YDim = IfcPositiveLengthMeasure::createObjectFromSTEP( args[4], map, errorStream );
	m_WallThickness = IfcPositiveLengthMeasure::createObjectFromSTEP( args[5], map, errorStream );
	m_InnerFilletRadius = IfcNonNegativeLengthMeasure::createObjectFromSTEP( args[6], map, errorStream );
	m_OuterFilletRadius = IfcNonNegativeLengthMeasure::createObjectFromSTEP( args[7], map, errorStream );
}
void IFC4X3::IfcRectangleHollowProfileDef::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcRectangleProfileDef::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "WallThickness", m_WallThickness ) );
	vec_attributes.emplace_back( std::make_pair( "InnerFilletRadius", m_InnerFilletRadius ) );
	vec_attributes.emplace_back( std::make_pair( "OuterFilletRadius", m_OuterFilletRadius ) );
}
void IFC4X3::IfcRectangleHollowProfileDef::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcRectangleProfileDef::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcRectangleHollowProfileDef::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcRectangleProfileDef::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcRectangleHollowProfileDef::unlinkFromInverseCounterparts()
{
	IfcRectangleProfileDef::unlinkFromInverseCounterparts();
}
