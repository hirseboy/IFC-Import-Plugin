/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcCurrencyRelationship.h"
#include "ifcpp/IFC4X3/include/IfcDateTime.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcLibraryInformation.h"
#include "ifcpp/IFC4X3/include/IfcMonetaryUnit.h"
#include "ifcpp/IFC4X3/include/IfcPositiveRatioMeasure.h"
#include "ifcpp/IFC4X3/include/IfcText.h"

// ENTITY IfcCurrencyRelationship 
IFC4X3::IfcCurrencyRelationship::IfcCurrencyRelationship( int tag ) { m_tag = tag; }
void IFC4X3::IfcCurrencyRelationship::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCCURRENCYRELATIONSHIP" << "(";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_RelatingMonetaryUnit ) { stream << "#" << m_RelatingMonetaryUnit->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_RelatedMonetaryUnit ) { stream << "#" << m_RelatedMonetaryUnit->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_ExchangeRate ) { m_ExchangeRate->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_RateDateTime ) { m_RateDateTime->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_RateSource ) { stream << "#" << m_RateSource->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcCurrencyRelationship::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcCurrencyRelationship::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 7 ){ std::stringstream err; err << "Wrong parameter count for entity IfcCurrencyRelationship, expecting 7, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_Name = IfcLabel::createObjectFromSTEP( args[0], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[1], map, errorStream );
	readEntityReference( args[2], m_RelatingMonetaryUnit, map, errorStream );
	readEntityReference( args[3], m_RelatedMonetaryUnit, map, errorStream );
	m_ExchangeRate = IfcPositiveRatioMeasure::createObjectFromSTEP( args[4], map, errorStream );
	m_RateDateTime = IfcDateTime::createObjectFromSTEP( args[5], map, errorStream );
	readEntityReference( args[6], m_RateSource, map, errorStream );
}
void IFC4X3::IfcCurrencyRelationship::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcResourceLevelRelationship::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "RelatingMonetaryUnit", m_RelatingMonetaryUnit ) );
	vec_attributes.emplace_back( std::make_pair( "RelatedMonetaryUnit", m_RelatedMonetaryUnit ) );
	vec_attributes.emplace_back( std::make_pair( "ExchangeRate", m_ExchangeRate ) );
	vec_attributes.emplace_back( std::make_pair( "RateDateTime", m_RateDateTime ) );
	vec_attributes.emplace_back( std::make_pair( "RateSource", m_RateSource ) );
}
void IFC4X3::IfcCurrencyRelationship::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcResourceLevelRelationship::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcCurrencyRelationship::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcResourceLevelRelationship::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcCurrencyRelationship::unlinkFromInverseCounterparts()
{
	IfcResourceLevelRelationship::unlinkFromInverseCounterparts();
}
