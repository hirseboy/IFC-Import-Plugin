/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcDimensionalExponents.h"

// ENTITY IfcDimensionalExponents 
IFC4X3::IfcDimensionalExponents::IfcDimensionalExponents( int tag ) { m_tag = tag; }
void IFC4X3::IfcDimensionalExponents::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCDIMENSIONALEXPONENTS" << "(";
	stream << m_LengthExponent;
	stream << ",";
	stream << m_MassExponent;
	stream << ",";
	stream << m_TimeExponent;
	stream << ",";
	stream << m_ElectricCurrentExponent;
	stream << ",";
	stream << m_ThermodynamicTemperatureExponent;
	stream << ",";
	stream << m_AmountOfSubstanceExponent;
	stream << ",";
	stream << m_LuminousIntensityExponent;
	stream << ");";
}
void IFC4X3::IfcDimensionalExponents::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcDimensionalExponents::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 7 ){ std::stringstream err; err << "Wrong parameter count for entity IfcDimensionalExponents, expecting 7, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	readIntegerValue( args[0], m_LengthExponent );
	readIntegerValue( args[1], m_MassExponent );
	readIntegerValue( args[2], m_TimeExponent );
	readIntegerValue( args[3], m_ElectricCurrentExponent );
	readIntegerValue( args[4], m_ThermodynamicTemperatureExponent );
	readIntegerValue( args[5], m_AmountOfSubstanceExponent );
	readIntegerValue( args[6], m_LuminousIntensityExponent );
}
void IFC4X3::IfcDimensionalExponents::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	vec_attributes.emplace_back( std::make_pair( "LengthExponent", shared_ptr<IntegerAttribute>( new IntegerAttribute( m_LengthExponent ) ) ) );
	vec_attributes.emplace_back( std::make_pair( "MassExponent", shared_ptr<IntegerAttribute>( new IntegerAttribute( m_MassExponent ) ) ) );
	vec_attributes.emplace_back( std::make_pair( "TimeExponent", shared_ptr<IntegerAttribute>( new IntegerAttribute( m_TimeExponent ) ) ) );
	vec_attributes.emplace_back( std::make_pair( "ElectricCurrentExponent", shared_ptr<IntegerAttribute>( new IntegerAttribute( m_ElectricCurrentExponent ) ) ) );
	vec_attributes.emplace_back( std::make_pair( "ThermodynamicTemperatureExponent", shared_ptr<IntegerAttribute>( new IntegerAttribute( m_ThermodynamicTemperatureExponent ) ) ) );
	vec_attributes.emplace_back( std::make_pair( "AmountOfSubstanceExponent", shared_ptr<IntegerAttribute>( new IntegerAttribute( m_AmountOfSubstanceExponent ) ) ) );
	vec_attributes.emplace_back( std::make_pair( "LuminousIntensityExponent", shared_ptr<IntegerAttribute>( new IntegerAttribute( m_LuminousIntensityExponent ) ) ) );
}
void IFC4X3::IfcDimensionalExponents::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
}
void IFC4X3::IfcDimensionalExponents::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcDimensionalExponents::unlinkFromInverseCounterparts()
{
}
