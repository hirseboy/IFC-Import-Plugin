/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcSizeSelect.h"
#include "ifcpp/IFC4X3/include/IfcTextAlignment.h"
#include "ifcpp/IFC4X3/include/IfcTextDecoration.h"
#include "ifcpp/IFC4X3/include/IfcTextStyleTextModel.h"
#include "ifcpp/IFC4X3/include/IfcTextTransformation.h"

// ENTITY IfcTextStyleTextModel 
IFC4X3::IfcTextStyleTextModel::IfcTextStyleTextModel( int tag ) { m_tag = tag; }
void IFC4X3::IfcTextStyleTextModel::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCTEXTSTYLETEXTMODEL" << "(";
	if( m_TextIndent ) { m_TextIndent->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_TextAlign ) { m_TextAlign->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_TextDecoration ) { m_TextDecoration->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_LetterSpacing ) { m_LetterSpacing->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_WordSpacing ) { m_WordSpacing->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_TextTransform ) { m_TextTransform->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_LineHeight ) { m_LineHeight->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ");";
}
void IFC4X3::IfcTextStyleTextModel::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcTextStyleTextModel::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 7 ){ std::stringstream err; err << "Wrong parameter count for entity IfcTextStyleTextModel, expecting 7, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_TextIndent = IfcSizeSelect::createObjectFromSTEP( args[0], map, errorStream );
	m_TextAlign = IfcTextAlignment::createObjectFromSTEP( args[1], map, errorStream );
	m_TextDecoration = IfcTextDecoration::createObjectFromSTEP( args[2], map, errorStream );
	m_LetterSpacing = IfcSizeSelect::createObjectFromSTEP( args[3], map, errorStream );
	m_WordSpacing = IfcSizeSelect::createObjectFromSTEP( args[4], map, errorStream );
	m_TextTransform = IfcTextTransformation::createObjectFromSTEP( args[5], map, errorStream );
	m_LineHeight = IfcSizeSelect::createObjectFromSTEP( args[6], map, errorStream );
}
void IFC4X3::IfcTextStyleTextModel::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcPresentationItem::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "TextIndent", m_TextIndent ) );
	vec_attributes.emplace_back( std::make_pair( "TextAlign", m_TextAlign ) );
	vec_attributes.emplace_back( std::make_pair( "TextDecoration", m_TextDecoration ) );
	vec_attributes.emplace_back( std::make_pair( "LetterSpacing", m_LetterSpacing ) );
	vec_attributes.emplace_back( std::make_pair( "WordSpacing", m_WordSpacing ) );
	vec_attributes.emplace_back( std::make_pair( "TextTransform", m_TextTransform ) );
	vec_attributes.emplace_back( std::make_pair( "LineHeight", m_LineHeight ) );
}
void IFC4X3::IfcTextStyleTextModel::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcPresentationItem::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcTextStyleTextModel::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcPresentationItem::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcTextStyleTextModel::unlinkFromInverseCounterparts()
{
	IfcPresentationItem::unlinkFromInverseCounterparts();
}
