/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcLinearForceMeasure.h"
#include "ifcpp/IFC4X3/include/IfcLinearMomentMeasure.h"
#include "ifcpp/IFC4X3/include/IfcStructuralLoadLinearForce.h"

// ENTITY IfcStructuralLoadLinearForce 
IFC4X3::IfcStructuralLoadLinearForce::IfcStructuralLoadLinearForce( int tag ) { m_tag = tag; }
void IFC4X3::IfcStructuralLoadLinearForce::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCSTRUCTURALLOADLINEARFORCE" << "(";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_LinearForceX ) { m_LinearForceX->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_LinearForceY ) { m_LinearForceY->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_LinearForceZ ) { m_LinearForceZ->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_LinearMomentX ) { m_LinearMomentX->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_LinearMomentY ) { m_LinearMomentY->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_LinearMomentZ ) { m_LinearMomentZ->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcStructuralLoadLinearForce::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcStructuralLoadLinearForce::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 7 ){ std::stringstream err; err << "Wrong parameter count for entity IfcStructuralLoadLinearForce, expecting 7, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_Name = IfcLabel::createObjectFromSTEP( args[0], map, errorStream );
	m_LinearForceX = IfcLinearForceMeasure::createObjectFromSTEP( args[1], map, errorStream );
	m_LinearForceY = IfcLinearForceMeasure::createObjectFromSTEP( args[2], map, errorStream );
	m_LinearForceZ = IfcLinearForceMeasure::createObjectFromSTEP( args[3], map, errorStream );
	m_LinearMomentX = IfcLinearMomentMeasure::createObjectFromSTEP( args[4], map, errorStream );
	m_LinearMomentY = IfcLinearMomentMeasure::createObjectFromSTEP( args[5], map, errorStream );
	m_LinearMomentZ = IfcLinearMomentMeasure::createObjectFromSTEP( args[6], map, errorStream );
}
void IFC4X3::IfcStructuralLoadLinearForce::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcStructuralLoadStatic::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "LinearForceX", m_LinearForceX ) );
	vec_attributes.emplace_back( std::make_pair( "LinearForceY", m_LinearForceY ) );
	vec_attributes.emplace_back( std::make_pair( "LinearForceZ", m_LinearForceZ ) );
	vec_attributes.emplace_back( std::make_pair( "LinearMomentX", m_LinearMomentX ) );
	vec_attributes.emplace_back( std::make_pair( "LinearMomentY", m_LinearMomentY ) );
	vec_attributes.emplace_back( std::make_pair( "LinearMomentZ", m_LinearMomentZ ) );
}
void IFC4X3::IfcStructuralLoadLinearForce::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcStructuralLoadStatic::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcStructuralLoadLinearForce::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcStructuralLoadStatic::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcStructuralLoadLinearForce::unlinkFromInverseCounterparts()
{
	IfcStructuralLoadStatic::unlinkFromInverseCounterparts();
}
