/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcComplexProperty.h"
#include "ifcpp/IFC4X3/include/IfcCurveInterpolationEnum.h"
#include "ifcpp/IFC4X3/include/IfcExternalReferenceRelationship.h"
#include "ifcpp/IFC4X3/include/IfcIdentifier.h"
#include "ifcpp/IFC4X3/include/IfcPropertyDependencyRelationship.h"
#include "ifcpp/IFC4X3/include/IfcPropertySet.h"
#include "ifcpp/IFC4X3/include/IfcPropertyTableValue.h"
#include "ifcpp/IFC4X3/include/IfcResourceApprovalRelationship.h"
#include "ifcpp/IFC4X3/include/IfcResourceConstraintRelationship.h"
#include "ifcpp/IFC4X3/include/IfcText.h"
#include "ifcpp/IFC4X3/include/IfcUnit.h"
#include "ifcpp/IFC4X3/include/IfcValue.h"

// ENTITY IfcPropertyTableValue 
IFC4X3::IfcPropertyTableValue::IfcPropertyTableValue( int tag ) { m_tag = tag; }
void IFC4X3::IfcPropertyTableValue::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCPROPERTYTABLEVALUE" << "(";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Specification ) { m_Specification->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_DefiningValues.size() > 0 )
	{
		stream << "(";
		for( size_t ii = 0; ii < m_DefiningValues.size(); ++ii )
		{
			if( ii > 0 )
			{
				stream << ",";
			}
			const shared_ptr<IfcValue>& type_object = m_DefiningValues[ii];
			if( type_object )
			{
				type_object->getStepParameter( stream, true );
			}
			else
			{
				stream << "$";
			}
		}
		stream << ")";
	}
	else { stream << "$"; }
	stream << ",";
	if( m_DefinedValues.size() > 0 )
	{
		stream << "(";
		for( size_t ii = 0; ii < m_DefinedValues.size(); ++ii )
		{
			if( ii > 0 )
			{
				stream << ",";
			}
			const shared_ptr<IfcValue>& type_object = m_DefinedValues[ii];
			if( type_object )
			{
				type_object->getStepParameter( stream, true );
			}
			else
			{
				stream << "$";
			}
		}
		stream << ")";
	}
	else { stream << "$"; }
	stream << ",";
	if( m_Expression ) { m_Expression->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_DefiningUnit ) { m_DefiningUnit->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_DefinedUnit ) { m_DefinedUnit->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_CurveInterpolation ) { m_CurveInterpolation->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcPropertyTableValue::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcPropertyTableValue::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 8 ){ std::stringstream err; err << "Wrong parameter count for entity IfcPropertyTableValue, expecting 8, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_Name = IfcIdentifier::createObjectFromSTEP( args[0], map, errorStream );
	m_Specification = IfcText::createObjectFromSTEP( args[1], map, errorStream );
	readSelectList( args[2], m_DefiningValues, map, errorStream );
	readSelectList( args[3], m_DefinedValues, map, errorStream );
	m_Expression = IfcText::createObjectFromSTEP( args[4], map, errorStream );
	m_DefiningUnit = IfcUnit::createObjectFromSTEP( args[5], map, errorStream );
	m_DefinedUnit = IfcUnit::createObjectFromSTEP( args[6], map, errorStream );
	m_CurveInterpolation = IfcCurveInterpolationEnum::createObjectFromSTEP( args[7], map, errorStream );
}
void IFC4X3::IfcPropertyTableValue::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcSimpleProperty::getAttributes( vec_attributes );
	shared_ptr<AttributeObjectVector> DefiningValues_vec_object( new AttributeObjectVector() );
	std::copy( m_DefiningValues.begin(), m_DefiningValues.end(), std::back_inserter( DefiningValues_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "DefiningValues", DefiningValues_vec_object ) );
	shared_ptr<AttributeObjectVector> DefinedValues_vec_object( new AttributeObjectVector() );
	std::copy( m_DefinedValues.begin(), m_DefinedValues.end(), std::back_inserter( DefinedValues_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "DefinedValues", DefinedValues_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "Expression", m_Expression ) );
	vec_attributes.emplace_back( std::make_pair( "DefiningUnit", m_DefiningUnit ) );
	vec_attributes.emplace_back( std::make_pair( "DefinedUnit", m_DefinedUnit ) );
	vec_attributes.emplace_back( std::make_pair( "CurveInterpolation", m_CurveInterpolation ) );
}
void IFC4X3::IfcPropertyTableValue::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcSimpleProperty::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcPropertyTableValue::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcSimpleProperty::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcPropertyTableValue::unlinkFromInverseCounterparts()
{
	IfcSimpleProperty::unlinkFromInverseCounterparts();
}
