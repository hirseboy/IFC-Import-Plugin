/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcConnectionPointEccentricity.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcPointOrVertexPoint.h"

// ENTITY IfcConnectionPointEccentricity 
IFC4X3::IfcConnectionPointEccentricity::IfcConnectionPointEccentricity( int tag ) { m_tag = tag; }
void IFC4X3::IfcConnectionPointEccentricity::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCCONNECTIONPOINTECCENTRICITY" << "(";
	if( m_PointOnRelatingElement ) { m_PointOnRelatingElement->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_PointOnRelatedElement ) { m_PointOnRelatedElement->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_EccentricityInX ) { m_EccentricityInX->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_EccentricityInY ) { m_EccentricityInY->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_EccentricityInZ ) { m_EccentricityInZ->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcConnectionPointEccentricity::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcConnectionPointEccentricity::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 5 ){ std::stringstream err; err << "Wrong parameter count for entity IfcConnectionPointEccentricity, expecting 5, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_PointOnRelatingElement = IfcPointOrVertexPoint::createObjectFromSTEP( args[0], map, errorStream );
	m_PointOnRelatedElement = IfcPointOrVertexPoint::createObjectFromSTEP( args[1], map, errorStream );
	m_EccentricityInX = IfcLengthMeasure::createObjectFromSTEP( args[2], map, errorStream );
	m_EccentricityInY = IfcLengthMeasure::createObjectFromSTEP( args[3], map, errorStream );
	m_EccentricityInZ = IfcLengthMeasure::createObjectFromSTEP( args[4], map, errorStream );
}
void IFC4X3::IfcConnectionPointEccentricity::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcConnectionPointGeometry::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "EccentricityInX", m_EccentricityInX ) );
	vec_attributes.emplace_back( std::make_pair( "EccentricityInY", m_EccentricityInY ) );
	vec_attributes.emplace_back( std::make_pair( "EccentricityInZ", m_EccentricityInZ ) );
}
void IFC4X3::IfcConnectionPointEccentricity::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcConnectionPointGeometry::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcConnectionPointEccentricity::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcConnectionPointGeometry::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcConnectionPointEccentricity::unlinkFromInverseCounterparts()
{
	IfcConnectionPointGeometry::unlinkFromInverseCounterparts();
}
