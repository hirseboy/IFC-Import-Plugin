/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcDataOriginEnum.h"
#include "ifcpp/IFC4X3/include/IfcDateTime.h"
#include "ifcpp/IFC4X3/include/IfcExternalReferenceRelationship.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcRegularTimeSeries.h"
#include "ifcpp/IFC4X3/include/IfcText.h"
#include "ifcpp/IFC4X3/include/IfcTimeMeasure.h"
#include "ifcpp/IFC4X3/include/IfcTimeSeriesDataTypeEnum.h"
#include "ifcpp/IFC4X3/include/IfcTimeSeriesValue.h"
#include "ifcpp/IFC4X3/include/IfcUnit.h"

// ENTITY IfcRegularTimeSeries 
IFC4X3::IfcRegularTimeSeries::IfcRegularTimeSeries( int tag ) { m_tag = tag; }
void IFC4X3::IfcRegularTimeSeries::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCREGULARTIMESERIES" << "(";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_StartTime ) { m_StartTime->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_EndTime ) { m_EndTime->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_TimeSeriesDataType ) { m_TimeSeriesDataType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_DataOrigin ) { m_DataOrigin->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_UserDefinedDataOrigin ) { m_UserDefinedDataOrigin->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Unit ) { m_Unit->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_TimeStep ) { m_TimeStep->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	writeEntityList( stream, m_Values );
	stream << ");";
}
void IFC4X3::IfcRegularTimeSeries::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcRegularTimeSeries::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 10 ){ std::stringstream err; err << "Wrong parameter count for entity IfcRegularTimeSeries, expecting 10, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_Name = IfcLabel::createObjectFromSTEP( args[0], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[1], map, errorStream );
	m_StartTime = IfcDateTime::createObjectFromSTEP( args[2], map, errorStream );
	m_EndTime = IfcDateTime::createObjectFromSTEP( args[3], map, errorStream );
	m_TimeSeriesDataType = IfcTimeSeriesDataTypeEnum::createObjectFromSTEP( args[4], map, errorStream );
	m_DataOrigin = IfcDataOriginEnum::createObjectFromSTEP( args[5], map, errorStream );
	m_UserDefinedDataOrigin = IfcLabel::createObjectFromSTEP( args[6], map, errorStream );
	m_Unit = IfcUnit::createObjectFromSTEP( args[7], map, errorStream );
	m_TimeStep = IfcTimeMeasure::createObjectFromSTEP( args[8], map, errorStream );
	readEntityReferenceList( args[9], m_Values, map, errorStream );
}
void IFC4X3::IfcRegularTimeSeries::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcTimeSeries::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "TimeStep", m_TimeStep ) );
	shared_ptr<AttributeObjectVector> Values_vec_object( new AttributeObjectVector() );
	std::copy( m_Values.begin(), m_Values.end(), std::back_inserter( Values_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "Values", Values_vec_object ) );
}
void IFC4X3::IfcRegularTimeSeries::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcTimeSeries::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcRegularTimeSeries::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcTimeSeries::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcRegularTimeSeries::unlinkFromInverseCounterparts()
{
	IfcTimeSeries::unlinkFromInverseCounterparts();
}
