/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcPlaneAngleMeasure.h"
#include "ifcpp/IFC4X3/include/IfcStructuralLoadSingleDisplacement.h"

// ENTITY IfcStructuralLoadSingleDisplacement 
IFC4X3::IfcStructuralLoadSingleDisplacement::IfcStructuralLoadSingleDisplacement( int tag ) { m_tag = tag; }
void IFC4X3::IfcStructuralLoadSingleDisplacement::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCSTRUCTURALLOADSINGLEDISPLACEMENT" << "(";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_DisplacementX ) { m_DisplacementX->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_DisplacementY ) { m_DisplacementY->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_DisplacementZ ) { m_DisplacementZ->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_RotationalDisplacementRX ) { m_RotationalDisplacementRX->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_RotationalDisplacementRY ) { m_RotationalDisplacementRY->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_RotationalDisplacementRZ ) { m_RotationalDisplacementRZ->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcStructuralLoadSingleDisplacement::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcStructuralLoadSingleDisplacement::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 7 ){ std::stringstream err; err << "Wrong parameter count for entity IfcStructuralLoadSingleDisplacement, expecting 7, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_Name = IfcLabel::createObjectFromSTEP( args[0], map, errorStream );
	m_DisplacementX = IfcLengthMeasure::createObjectFromSTEP( args[1], map, errorStream );
	m_DisplacementY = IfcLengthMeasure::createObjectFromSTEP( args[2], map, errorStream );
	m_DisplacementZ = IfcLengthMeasure::createObjectFromSTEP( args[3], map, errorStream );
	m_RotationalDisplacementRX = IfcPlaneAngleMeasure::createObjectFromSTEP( args[4], map, errorStream );
	m_RotationalDisplacementRY = IfcPlaneAngleMeasure::createObjectFromSTEP( args[5], map, errorStream );
	m_RotationalDisplacementRZ = IfcPlaneAngleMeasure::createObjectFromSTEP( args[6], map, errorStream );
}
void IFC4X3::IfcStructuralLoadSingleDisplacement::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcStructuralLoadStatic::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "DisplacementX", m_DisplacementX ) );
	vec_attributes.emplace_back( std::make_pair( "DisplacementY", m_DisplacementY ) );
	vec_attributes.emplace_back( std::make_pair( "DisplacementZ", m_DisplacementZ ) );
	vec_attributes.emplace_back( std::make_pair( "RotationalDisplacementRX", m_RotationalDisplacementRX ) );
	vec_attributes.emplace_back( std::make_pair( "RotationalDisplacementRY", m_RotationalDisplacementRY ) );
	vec_attributes.emplace_back( std::make_pair( "RotationalDisplacementRZ", m_RotationalDisplacementRZ ) );
}
void IFC4X3::IfcStructuralLoadSingleDisplacement::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcStructuralLoadStatic::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcStructuralLoadSingleDisplacement::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcStructuralLoadStatic::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcStructuralLoadSingleDisplacement::unlinkFromInverseCounterparts()
{
	IfcStructuralLoadStatic::unlinkFromInverseCounterparts();
}
