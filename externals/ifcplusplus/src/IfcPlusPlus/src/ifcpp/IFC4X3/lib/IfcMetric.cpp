/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcActorSelect.h"
#include "ifcpp/IFC4X3/include/IfcBenchmarkEnum.h"
#include "ifcpp/IFC4X3/include/IfcConstraintEnum.h"
#include "ifcpp/IFC4X3/include/IfcDateTime.h"
#include "ifcpp/IFC4X3/include/IfcExternalReferenceRelationship.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcMetric.h"
#include "ifcpp/IFC4X3/include/IfcMetricValueSelect.h"
#include "ifcpp/IFC4X3/include/IfcReference.h"
#include "ifcpp/IFC4X3/include/IfcResourceConstraintRelationship.h"
#include "ifcpp/IFC4X3/include/IfcText.h"

// ENTITY IfcMetric 
IFC4X3::IfcMetric::IfcMetric( int tag ) { m_tag = tag; }
void IFC4X3::IfcMetric::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCMETRIC" << "(";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ConstraintGrade ) { m_ConstraintGrade->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ConstraintSource ) { m_ConstraintSource->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_CreatingActor ) { m_CreatingActor->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_CreationTime ) { m_CreationTime->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_UserDefinedGrade ) { m_UserDefinedGrade->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Benchmark ) { m_Benchmark->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ValueSource ) { m_ValueSource->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_DataValue ) { m_DataValue->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_ReferencePath ) { stream << "#" << m_ReferencePath->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcMetric::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcMetric::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 11 ){ std::stringstream err; err << "Wrong parameter count for entity IfcMetric, expecting 11, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_Name = IfcLabel::createObjectFromSTEP( args[0], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[1], map, errorStream );
	m_ConstraintGrade = IfcConstraintEnum::createObjectFromSTEP( args[2], map, errorStream );
	m_ConstraintSource = IfcLabel::createObjectFromSTEP( args[3], map, errorStream );
	m_CreatingActor = IfcActorSelect::createObjectFromSTEP( args[4], map, errorStream );
	m_CreationTime = IfcDateTime::createObjectFromSTEP( args[5], map, errorStream );
	m_UserDefinedGrade = IfcLabel::createObjectFromSTEP( args[6], map, errorStream );
	m_Benchmark = IfcBenchmarkEnum::createObjectFromSTEP( args[7], map, errorStream );
	m_ValueSource = IfcLabel::createObjectFromSTEP( args[8], map, errorStream );
	m_DataValue = IfcMetricValueSelect::createObjectFromSTEP( args[9], map, errorStream );
	readEntityReference( args[10], m_ReferencePath, map, errorStream );
}
void IFC4X3::IfcMetric::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcConstraint::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Benchmark", m_Benchmark ) );
	vec_attributes.emplace_back( std::make_pair( "ValueSource", m_ValueSource ) );
	vec_attributes.emplace_back( std::make_pair( "DataValue", m_DataValue ) );
	vec_attributes.emplace_back( std::make_pair( "ReferencePath", m_ReferencePath ) );
}
void IFC4X3::IfcMetric::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcConstraint::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcMetric::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcConstraint::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcMetric::unlinkFromInverseCounterparts()
{
	IfcConstraint::unlinkFromInverseCounterparts();
}
