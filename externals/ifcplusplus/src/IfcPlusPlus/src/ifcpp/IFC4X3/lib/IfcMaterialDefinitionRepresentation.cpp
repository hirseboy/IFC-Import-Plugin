/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcMaterial.h"
#include "ifcpp/IFC4X3/include/IfcMaterialDefinitionRepresentation.h"
#include "ifcpp/IFC4X3/include/IfcRepresentation.h"
#include "ifcpp/IFC4X3/include/IfcText.h"

// ENTITY IfcMaterialDefinitionRepresentation 
IFC4X3::IfcMaterialDefinitionRepresentation::IfcMaterialDefinitionRepresentation( int tag ) { m_tag = tag; }
void IFC4X3::IfcMaterialDefinitionRepresentation::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCMATERIALDEFINITIONREPRESENTATION" << "(";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	writeEntityList( stream, m_Representations );
	stream << ",";
	if( m_RepresentedMaterial ) { stream << "#" << m_RepresentedMaterial->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcMaterialDefinitionRepresentation::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcMaterialDefinitionRepresentation::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 4 ){ std::stringstream err; err << "Wrong parameter count for entity IfcMaterialDefinitionRepresentation, expecting 4, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_Name = IfcLabel::createObjectFromSTEP( args[0], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[1], map, errorStream );
	readEntityReferenceList( args[2], m_Representations, map, errorStream );
	readEntityReference( args[3], m_RepresentedMaterial, map, errorStream );
}
void IFC4X3::IfcMaterialDefinitionRepresentation::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcProductRepresentation::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "RepresentedMaterial", m_RepresentedMaterial ) );
}
void IFC4X3::IfcMaterialDefinitionRepresentation::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcProductRepresentation::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcMaterialDefinitionRepresentation::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcProductRepresentation::setInverseCounterparts( ptr_self_entity );
	shared_ptr<IfcMaterialDefinitionRepresentation> ptr_self = dynamic_pointer_cast<IfcMaterialDefinitionRepresentation>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcMaterialDefinitionRepresentation::setInverseCounterparts: type mismatch" ); }
	if( m_RepresentedMaterial )
	{
		m_RepresentedMaterial->m_HasRepresentation_inverse.emplace_back( ptr_self );
	}
}
void IFC4X3::IfcMaterialDefinitionRepresentation::unlinkFromInverseCounterparts()
{
	IfcProductRepresentation::unlinkFromInverseCounterparts();
	if( m_RepresentedMaterial )
	{
		std::vector<weak_ptr<IfcMaterialDefinitionRepresentation> >& HasRepresentation_inverse = m_RepresentedMaterial->m_HasRepresentation_inverse;
		for( auto it_HasRepresentation_inverse = HasRepresentation_inverse.begin(); it_HasRepresentation_inverse != HasRepresentation_inverse.end(); )
		{
			weak_ptr<IfcMaterialDefinitionRepresentation> self_candidate_weak = *it_HasRepresentation_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_HasRepresentation_inverse;
				continue;
			}
			shared_ptr<IfcMaterialDefinitionRepresentation> self_candidate( *it_HasRepresentation_inverse );
			if( self_candidate.get() == this )
			{
				it_HasRepresentation_inverse= HasRepresentation_inverse.erase( it_HasRepresentation_inverse );
			}
			else
			{
				++it_HasRepresentation_inverse;
			}
		}
	}
}
