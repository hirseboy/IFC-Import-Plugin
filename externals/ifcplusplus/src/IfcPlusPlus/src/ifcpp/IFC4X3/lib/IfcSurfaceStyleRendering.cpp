/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcColourOrFactor.h"
#include "ifcpp/IFC4X3/include/IfcColourRgb.h"
#include "ifcpp/IFC4X3/include/IfcNormalisedRatioMeasure.h"
#include "ifcpp/IFC4X3/include/IfcReflectanceMethodEnum.h"
#include "ifcpp/IFC4X3/include/IfcSpecularHighlightSelect.h"
#include "ifcpp/IFC4X3/include/IfcSurfaceStyleRendering.h"

// ENTITY IfcSurfaceStyleRendering 
IFC4X3::IfcSurfaceStyleRendering::IfcSurfaceStyleRendering( int tag ) { m_tag = tag; }
void IFC4X3::IfcSurfaceStyleRendering::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCSURFACESTYLERENDERING" << "(";
	if( m_SurfaceColour ) { stream << "#" << m_SurfaceColour->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Transparency ) { m_Transparency->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_DiffuseColour ) { m_DiffuseColour->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_TransmissionColour ) { m_TransmissionColour->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_DiffuseTransmissionColour ) { m_DiffuseTransmissionColour->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_ReflectionColour ) { m_ReflectionColour->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_SpecularColour ) { m_SpecularColour->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_SpecularHighlight ) { m_SpecularHighlight->getStepParameter( stream, true ); } else { stream << "$" ; }
	stream << ",";
	if( m_ReflectanceMethod ) { m_ReflectanceMethod->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcSurfaceStyleRendering::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcSurfaceStyleRendering::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 9 ){ std::stringstream err; err << "Wrong parameter count for entity IfcSurfaceStyleRendering, expecting 9, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	readEntityReference( args[0], m_SurfaceColour, map, errorStream );
	m_Transparency = IfcNormalisedRatioMeasure::createObjectFromSTEP( args[1], map, errorStream );
	m_DiffuseColour = IfcColourOrFactor::createObjectFromSTEP( args[2], map, errorStream );
	m_TransmissionColour = IfcColourOrFactor::createObjectFromSTEP( args[3], map, errorStream );
	m_DiffuseTransmissionColour = IfcColourOrFactor::createObjectFromSTEP( args[4], map, errorStream );
	m_ReflectionColour = IfcColourOrFactor::createObjectFromSTEP( args[5], map, errorStream );
	m_SpecularColour = IfcColourOrFactor::createObjectFromSTEP( args[6], map, errorStream );
	m_SpecularHighlight = IfcSpecularHighlightSelect::createObjectFromSTEP( args[7], map, errorStream );
	m_ReflectanceMethod = IfcReflectanceMethodEnum::createObjectFromSTEP( args[8], map, errorStream );
}
void IFC4X3::IfcSurfaceStyleRendering::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcSurfaceStyleShading::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "DiffuseColour", m_DiffuseColour ) );
	vec_attributes.emplace_back( std::make_pair( "TransmissionColour", m_TransmissionColour ) );
	vec_attributes.emplace_back( std::make_pair( "DiffuseTransmissionColour", m_DiffuseTransmissionColour ) );
	vec_attributes.emplace_back( std::make_pair( "ReflectionColour", m_ReflectionColour ) );
	vec_attributes.emplace_back( std::make_pair( "SpecularColour", m_SpecularColour ) );
	vec_attributes.emplace_back( std::make_pair( "SpecularHighlight", m_SpecularHighlight ) );
	vec_attributes.emplace_back( std::make_pair( "ReflectanceMethod", m_ReflectanceMethod ) );
}
void IFC4X3::IfcSurfaceStyleRendering::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcSurfaceStyleShading::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcSurfaceStyleRendering::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcSurfaceStyleShading::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcSurfaceStyleRendering::unlinkFromInverseCounterparts()
{
	IfcSurfaceStyleShading::unlinkFromInverseCounterparts();
}
